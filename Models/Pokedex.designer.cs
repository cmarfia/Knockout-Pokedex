#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PokedexApi.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PokemonApi")]
	public partial class PokedexDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAbility(Ability instance);
    partial void UpdateAbility(Ability instance);
    partial void DeleteAbility(Ability instance);
    partial void InsertTypeToTypeEffect(TypeToTypeEffect instance);
    partial void UpdateTypeToTypeEffect(TypeToTypeEffect instance);
    partial void DeleteTypeToTypeEffect(TypeToTypeEffect instance);
    partial void InsertDescription(Description instance);
    partial void UpdateDescription(Description instance);
    partial void DeleteDescription(Description instance);
    partial void InsertDescriptionGame(DescriptionGame instance);
    partial void UpdateDescriptionGame(DescriptionGame instance);
    partial void DeleteDescriptionGame(DescriptionGame instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertMove(Move instance);
    partial void UpdateMove(Move instance);
    partial void DeleteMove(Move instance);
    partial void InsertPokemon(Pokemon instance);
    partial void UpdatePokemon(Pokemon instance);
    partial void DeletePokemon(Pokemon instance);
    partial void InsertPokemonAbility(PokemonAbility instance);
    partial void UpdatePokemonAbility(PokemonAbility instance);
    partial void DeletePokemonAbility(PokemonAbility instance);
    partial void InsertPokemonDescription(PokemonDescription instance);
    partial void UpdatePokemonDescription(PokemonDescription instance);
    partial void DeletePokemonDescription(PokemonDescription instance);
    partial void InsertPokemonEvolution(PokemonEvolution instance);
    partial void UpdatePokemonEvolution(PokemonEvolution instance);
    partial void DeletePokemonEvolution(PokemonEvolution instance);
    partial void InsertPokemonMove(PokemonMove instance);
    partial void UpdatePokemonMove(PokemonMove instance);
    partial void DeletePokemonMove(PokemonMove instance);
    partial void InsertPokemonSprite(PokemonSprite instance);
    partial void UpdatePokemonSprite(PokemonSprite instance);
    partial void DeletePokemonSprite(PokemonSprite instance);
    partial void InsertPokemonType(PokemonType instance);
    partial void UpdatePokemonType(PokemonType instance);
    partial void DeletePokemonType(PokemonType instance);
    partial void InsertSprite(Sprite instance);
    partial void UpdateSprite(Sprite instance);
    partial void DeleteSprite(Sprite instance);
    partial void InsertType(Type instance);
    partial void UpdateType(Type instance);
    partial void DeleteType(Type instance);
    partial void InsertTypeEffect(TypeEffect instance);
    partial void UpdateTypeEffect(TypeEffect instance);
    partial void DeleteTypeEffect(TypeEffect instance);
    #endregion
		
		public PokedexDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PokemonApiConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PokedexDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PokedexDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PokedexDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PokedexDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ability> Abilities
		{
			get
			{
				return this.GetTable<Ability>();
			}
		}
		
		public System.Data.Linq.Table<TypeToTypeEffect> TypeToTypeEffects
		{
			get
			{
				return this.GetTable<TypeToTypeEffect>();
			}
		}
		
		public System.Data.Linq.Table<Description> Descriptions
		{
			get
			{
				return this.GetTable<Description>();
			}
		}
		
		public System.Data.Linq.Table<DescriptionGame> DescriptionGames
		{
			get
			{
				return this.GetTable<DescriptionGame>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Move> Moves
		{
			get
			{
				return this.GetTable<Move>();
			}
		}
		
		public System.Data.Linq.Table<Pokemon> Pokemons
		{
			get
			{
				return this.GetTable<Pokemon>();
			}
		}
		
		public System.Data.Linq.Table<PokemonAbility> PokemonAbilities
		{
			get
			{
				return this.GetTable<PokemonAbility>();
			}
		}
		
		public System.Data.Linq.Table<PokemonDescription> PokemonDescriptions
		{
			get
			{
				return this.GetTable<PokemonDescription>();
			}
		}
		
		public System.Data.Linq.Table<PokemonEvolution> PokemonEvolutions
		{
			get
			{
				return this.GetTable<PokemonEvolution>();
			}
		}
		
		public System.Data.Linq.Table<PokemonMove> PokemonMoves
		{
			get
			{
				return this.GetTable<PokemonMove>();
			}
		}
		
		public System.Data.Linq.Table<PokemonSprite> PokemonSprites
		{
			get
			{
				return this.GetTable<PokemonSprite>();
			}
		}
		
		public System.Data.Linq.Table<PokemonType> PokemonTypes
		{
			get
			{
				return this.GetTable<PokemonType>();
			}
		}
		
		public System.Data.Linq.Table<Sprite> Sprites
		{
			get
			{
				return this.GetTable<Sprite>();
			}
		}
		
		public System.Data.Linq.Table<Type> Types
		{
			get
			{
				return this.GetTable<Type>();
			}
		}
		
		public System.Data.Linq.Table<TypeEffect> TypeEffects
		{
			get
			{
				return this.GetTable<TypeEffect>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ability")]
	public partial class Ability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbilityId;
		
		private int _PkApiId;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private string _ResourceUri;
		
		private EntitySet<PokemonAbility> _PokemonAbilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbilityIdChanging(int value);
    partial void OnAbilityIdChanged();
    partial void OnPkApiIdChanging(int value);
    partial void OnPkApiIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnResourceUriChanging(string value);
    partial void OnResourceUriChanged();
    #endregion
		
		public Ability()
		{
			this._PokemonAbilities = new EntitySet<PokemonAbility>(new Action<PokemonAbility>(this.attach_PokemonAbilities), new Action<PokemonAbility>(this.detach_PokemonAbilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbilityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbilityId
		{
			get
			{
				return this._AbilityId;
			}
			set
			{
				if ((this._AbilityId != value))
				{
					this.OnAbilityIdChanging(value);
					this.SendPropertyChanging();
					this._AbilityId = value;
					this.SendPropertyChanged("AbilityId");
					this.OnAbilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkApiId", DbType="Int NOT NULL")]
		public int PkApiId
		{
			get
			{
				return this._PkApiId;
			}
			set
			{
				if ((this._PkApiId != value))
				{
					this.OnPkApiIdChanging(value);
					this.SendPropertyChanging();
					this._PkApiId = value;
					this.SendPropertyChanged("PkApiId");
					this.OnPkApiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="Date NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceUri", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ResourceUri
		{
			get
			{
				return this._ResourceUri;
			}
			set
			{
				if ((this._ResourceUri != value))
				{
					this.OnResourceUriChanging(value);
					this.SendPropertyChanging();
					this._ResourceUri = value;
					this.SendPropertyChanged("ResourceUri");
					this.OnResourceUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ability_PokemonAbility", Storage="_PokemonAbilities", ThisKey="AbilityId", OtherKey="AbilityId")]
		public EntitySet<PokemonAbility> PokemonAbilities
		{
			get
			{
				return this._PokemonAbilities;
			}
			set
			{
				this._PokemonAbilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PokemonAbilities(PokemonAbility entity)
		{
			this.SendPropertyChanging();
			entity.Ability = this;
		}
		
		private void detach_PokemonAbilities(PokemonAbility entity)
		{
			this.SendPropertyChanging();
			entity.Ability = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeToTypeEffect")]
	public partial class TypeToTypeEffect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeToTypeEffectId;
		
		private int _TypeId;
		
		private int _AgainstTypeId;
		
		private int _TypeEffectId;
		
		private EntityRef<Type> _Type;
		
		private EntityRef<Type> _Type1;
		
		private EntityRef<TypeEffect> _TypeEffect;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeToTypeEffectIdChanging(int value);
    partial void OnTypeToTypeEffectIdChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    partial void OnAgainstTypeIdChanging(int value);
    partial void OnAgainstTypeIdChanged();
    partial void OnTypeEffectIdChanging(int value);
    partial void OnTypeEffectIdChanged();
    #endregion
		
		public TypeToTypeEffect()
		{
			this._Type = default(EntityRef<Type>);
			this._Type1 = default(EntityRef<Type>);
			this._TypeEffect = default(EntityRef<TypeEffect>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeToTypeEffectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeToTypeEffectId
		{
			get
			{
				return this._TypeToTypeEffectId;
			}
			set
			{
				if ((this._TypeToTypeEffectId != value))
				{
					this.OnTypeToTypeEffectIdChanging(value);
					this.SendPropertyChanging();
					this._TypeToTypeEffectId = value;
					this.SendPropertyChanged("TypeToTypeEffectId");
					this.OnTypeToTypeEffectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int NOT NULL")]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgainstTypeId", DbType="Int NOT NULL")]
		public int AgainstTypeId
		{
			get
			{
				return this._AgainstTypeId;
			}
			set
			{
				if ((this._AgainstTypeId != value))
				{
					if (this._Type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgainstTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AgainstTypeId = value;
					this.SendPropertyChanged("AgainstTypeId");
					this.OnAgainstTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeEffectId", DbType="Int NOT NULL")]
		public int TypeEffectId
		{
			get
			{
				return this._TypeEffectId;
			}
			set
			{
				if ((this._TypeEffectId != value))
				{
					if (this._TypeEffect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeEffectIdChanging(value);
					this.SendPropertyChanging();
					this._TypeEffectId = value;
					this.SendPropertyChanged("TypeEffectId");
					this.OnTypeEffectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_TypeToTypeEffect", Storage="_Type", ThisKey="TypeId", OtherKey="TypeId", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.TypeToTypeEffects.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.TypeToTypeEffects.Add(this);
						this._TypeId = value.TypeId;
					}
					else
					{
						this._TypeId = default(int);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_TypeToTypeEffect1", Storage="_Type1", ThisKey="AgainstTypeId", OtherKey="TypeId", IsForeignKey=true)]
		public Type Type1
		{
			get
			{
				return this._Type1.Entity;
			}
			set
			{
				Type previousValue = this._Type1.Entity;
				if (((previousValue != value) 
							|| (this._Type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type1.Entity = null;
						previousValue.TypeToTypeEffects1.Remove(this);
					}
					this._Type1.Entity = value;
					if ((value != null))
					{
						value.TypeToTypeEffects1.Add(this);
						this._AgainstTypeId = value.TypeId;
					}
					else
					{
						this._AgainstTypeId = default(int);
					}
					this.SendPropertyChanged("Type1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeEffect_TypeToTypeEffect", Storage="_TypeEffect", ThisKey="TypeEffectId", OtherKey="TypeEffectId", IsForeignKey=true)]
		public TypeEffect TypeEffect
		{
			get
			{
				return this._TypeEffect.Entity;
			}
			set
			{
				TypeEffect previousValue = this._TypeEffect.Entity;
				if (((previousValue != value) 
							|| (this._TypeEffect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeEffect.Entity = null;
						previousValue.TypeToTypeEffects.Remove(this);
					}
					this._TypeEffect.Entity = value;
					if ((value != null))
					{
						value.TypeToTypeEffects.Add(this);
						this._TypeEffectId = value.TypeEffectId;
					}
					else
					{
						this._TypeEffectId = default(int);
					}
					this.SendPropertyChanged("TypeEffect");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Description")]
	public partial class Description : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DescriptionId;
		
		private int _PkApiId;
		
		private string _Description1;
		
		private System.DateTime _ModifiedDate;
		
		private string _ResourceUri;
		
		private EntitySet<DescriptionGame> _DescriptionGames;
		
		private EntitySet<PokemonDescription> _PokemonDescriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptionIdChanging(int value);
    partial void OnDescriptionIdChanged();
    partial void OnPkApiIdChanging(int value);
    partial void OnPkApiIdChanged();
    partial void OnDescription1Changing(string value);
    partial void OnDescription1Changed();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnResourceUriChanging(string value);
    partial void OnResourceUriChanged();
    #endregion
		
		public Description()
		{
			this._DescriptionGames = new EntitySet<DescriptionGame>(new Action<DescriptionGame>(this.attach_DescriptionGames), new Action<DescriptionGame>(this.detach_DescriptionGames));
			this._PokemonDescriptions = new EntitySet<PokemonDescription>(new Action<PokemonDescription>(this.attach_PokemonDescriptions), new Action<PokemonDescription>(this.detach_PokemonDescriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DescriptionId
		{
			get
			{
				return this._DescriptionId;
			}
			set
			{
				if ((this._DescriptionId != value))
				{
					this.OnDescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._DescriptionId = value;
					this.SendPropertyChanged("DescriptionId");
					this.OnDescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkApiId", DbType="Int NOT NULL")]
		public int PkApiId
		{
			get
			{
				return this._PkApiId;
			}
			set
			{
				if ((this._PkApiId != value))
				{
					this.OnPkApiIdChanging(value);
					this.SendPropertyChanging();
					this._PkApiId = value;
					this.SendPropertyChanged("PkApiId");
					this.OnPkApiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Description", Storage="_Description1", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description1
		{
			get
			{
				return this._Description1;
			}
			set
			{
				if ((this._Description1 != value))
				{
					this.OnDescription1Changing(value);
					this.SendPropertyChanging();
					this._Description1 = value;
					this.SendPropertyChanged("Description1");
					this.OnDescription1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="Date NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceUri", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ResourceUri
		{
			get
			{
				return this._ResourceUri;
			}
			set
			{
				if ((this._ResourceUri != value))
				{
					this.OnResourceUriChanging(value);
					this.SendPropertyChanging();
					this._ResourceUri = value;
					this.SendPropertyChanged("ResourceUri");
					this.OnResourceUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_DescriptionGame", Storage="_DescriptionGames", ThisKey="DescriptionId", OtherKey="DescriptionId")]
		public EntitySet<DescriptionGame> DescriptionGames
		{
			get
			{
				return this._DescriptionGames;
			}
			set
			{
				this._DescriptionGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_PokemonDescription", Storage="_PokemonDescriptions", ThisKey="DescriptionId", OtherKey="DescriptionId")]
		public EntitySet<PokemonDescription> PokemonDescriptions
		{
			get
			{
				return this._PokemonDescriptions;
			}
			set
			{
				this._PokemonDescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DescriptionGames(DescriptionGame entity)
		{
			this.SendPropertyChanging();
			entity.Description = this;
		}
		
		private void detach_DescriptionGames(DescriptionGame entity)
		{
			this.SendPropertyChanging();
			entity.Description = null;
		}
		
		private void attach_PokemonDescriptions(PokemonDescription entity)
		{
			this.SendPropertyChanging();
			entity.Description = this;
		}
		
		private void detach_PokemonDescriptions(PokemonDescription entity)
		{
			this.SendPropertyChanging();
			entity.Description = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DescriptionGame")]
	public partial class DescriptionGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DescriptionGameId;
		
		private int _DescriptionId;
		
		private int _GameId;
		
		private EntityRef<Description> _Description;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptionGameIdChanging(int value);
    partial void OnDescriptionGameIdChanged();
    partial void OnDescriptionIdChanging(int value);
    partial void OnDescriptionIdChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    #endregion
		
		public DescriptionGame()
		{
			this._Description = default(EntityRef<Description>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionGameId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DescriptionGameId
		{
			get
			{
				return this._DescriptionGameId;
			}
			set
			{
				if ((this._DescriptionGameId != value))
				{
					this.OnDescriptionGameIdChanging(value);
					this.SendPropertyChanging();
					this._DescriptionGameId = value;
					this.SendPropertyChanged("DescriptionGameId");
					this.OnDescriptionGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionId", DbType="Int NOT NULL")]
		public int DescriptionId
		{
			get
			{
				return this._DescriptionId;
			}
			set
			{
				if ((this._DescriptionId != value))
				{
					if (this._Description.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._DescriptionId = value;
					this.SendPropertyChanged("DescriptionId");
					this.OnDescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_DescriptionGame", Storage="_Description", ThisKey="DescriptionId", OtherKey="DescriptionId", IsForeignKey=true)]
		public Description Description
		{
			get
			{
				return this._Description.Entity;
			}
			set
			{
				Description previousValue = this._Description.Entity;
				if (((previousValue != value) 
							|| (this._Description.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Description.Entity = null;
						previousValue.DescriptionGames.Remove(this);
					}
					this._Description.Entity = value;
					if ((value != null))
					{
						value.DescriptionGames.Add(this);
						this._DescriptionId = value.DescriptionId;
					}
					else
					{
						this._DescriptionId = default(int);
					}
					this.SendPropertyChanged("Description");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_DescriptionGame", Storage="_Game", ThisKey="GameId", OtherKey="GameId", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.DescriptionGames.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.DescriptionGames.Add(this);
						this._GameId = value.GameId;
					}
					else
					{
						this._GameId = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameId;
		
		private int _PkApiId;
		
		private string _Name;
		
		private int _Generation;
		
		private int _ReleaseYear;
		
		private System.DateTime _ModifiedDate;
		
		private string _ResourceUri;
		
		private EntitySet<DescriptionGame> _DescriptionGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnPkApiIdChanging(int value);
    partial void OnPkApiIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenerationChanging(int value);
    partial void OnGenerationChanged();
    partial void OnReleaseYearChanging(int value);
    partial void OnReleaseYearChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnResourceUriChanging(string value);
    partial void OnResourceUriChanged();
    #endregion
		
		public Game()
		{
			this._DescriptionGames = new EntitySet<DescriptionGame>(new Action<DescriptionGame>(this.attach_DescriptionGames), new Action<DescriptionGame>(this.detach_DescriptionGames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkApiId", DbType="Int NOT NULL")]
		public int PkApiId
		{
			get
			{
				return this._PkApiId;
			}
			set
			{
				if ((this._PkApiId != value))
				{
					this.OnPkApiIdChanging(value);
					this.SendPropertyChanging();
					this._PkApiId = value;
					this.SendPropertyChanged("PkApiId");
					this.OnPkApiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Generation", DbType="Int NOT NULL")]
		public int Generation
		{
			get
			{
				return this._Generation;
			}
			set
			{
				if ((this._Generation != value))
				{
					this.OnGenerationChanging(value);
					this.SendPropertyChanging();
					this._Generation = value;
					this.SendPropertyChanged("Generation");
					this.OnGenerationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseYear", DbType="Int NOT NULL")]
		public int ReleaseYear
		{
			get
			{
				return this._ReleaseYear;
			}
			set
			{
				if ((this._ReleaseYear != value))
				{
					this.OnReleaseYearChanging(value);
					this.SendPropertyChanging();
					this._ReleaseYear = value;
					this.SendPropertyChanged("ReleaseYear");
					this.OnReleaseYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="Date NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceUri", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ResourceUri
		{
			get
			{
				return this._ResourceUri;
			}
			set
			{
				if ((this._ResourceUri != value))
				{
					this.OnResourceUriChanging(value);
					this.SendPropertyChanging();
					this._ResourceUri = value;
					this.SendPropertyChanged("ResourceUri");
					this.OnResourceUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_DescriptionGame", Storage="_DescriptionGames", ThisKey="GameId", OtherKey="GameId")]
		public EntitySet<DescriptionGame> DescriptionGames
		{
			get
			{
				return this._DescriptionGames;
			}
			set
			{
				this._DescriptionGames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DescriptionGames(DescriptionGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_DescriptionGames(DescriptionGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Move")]
	public partial class Move : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MoveId;
		
		private int _PkApiId;
		
		private string _Name;
		
		private string _Description;
		
		private string _Category;
		
		private int _Power;
		
		private int _PP;
		
		private int _Accuracy;
		
		private System.DateTime _ModifiedDate;
		
		private string _ResourceUri;
		
		private EntitySet<PokemonMove> _PokemonMoves;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMoveIdChanging(int value);
    partial void OnMoveIdChanged();
    partial void OnPkApiIdChanging(int value);
    partial void OnPkApiIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnPowerChanging(int value);
    partial void OnPowerChanged();
    partial void OnPPChanging(int value);
    partial void OnPPChanged();
    partial void OnAccuracyChanging(int value);
    partial void OnAccuracyChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnResourceUriChanging(string value);
    partial void OnResourceUriChanged();
    #endregion
		
		public Move()
		{
			this._PokemonMoves = new EntitySet<PokemonMove>(new Action<PokemonMove>(this.attach_PokemonMoves), new Action<PokemonMove>(this.detach_PokemonMoves));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoveId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MoveId
		{
			get
			{
				return this._MoveId;
			}
			set
			{
				if ((this._MoveId != value))
				{
					this.OnMoveIdChanging(value);
					this.SendPropertyChanging();
					this._MoveId = value;
					this.SendPropertyChanged("MoveId");
					this.OnMoveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkApiId", DbType="Int NOT NULL")]
		public int PkApiId
		{
			get
			{
				return this._PkApiId;
			}
			set
			{
				if ((this._PkApiId != value))
				{
					this.OnPkApiIdChanging(value);
					this.SendPropertyChanging();
					this._PkApiId = value;
					this.SendPropertyChanged("PkApiId");
					this.OnPkApiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Power", DbType="Int NOT NULL")]
		public int Power
		{
			get
			{
				return this._Power;
			}
			set
			{
				if ((this._Power != value))
				{
					this.OnPowerChanging(value);
					this.SendPropertyChanging();
					this._Power = value;
					this.SendPropertyChanged("Power");
					this.OnPowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PP", DbType="Int NOT NULL")]
		public int PP
		{
			get
			{
				return this._PP;
			}
			set
			{
				if ((this._PP != value))
				{
					this.OnPPChanging(value);
					this.SendPropertyChanging();
					this._PP = value;
					this.SendPropertyChanged("PP");
					this.OnPPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accuracy", DbType="Int NOT NULL")]
		public int Accuracy
		{
			get
			{
				return this._Accuracy;
			}
			set
			{
				if ((this._Accuracy != value))
				{
					this.OnAccuracyChanging(value);
					this.SendPropertyChanging();
					this._Accuracy = value;
					this.SendPropertyChanged("Accuracy");
					this.OnAccuracyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="Date NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceUri", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ResourceUri
		{
			get
			{
				return this._ResourceUri;
			}
			set
			{
				if ((this._ResourceUri != value))
				{
					this.OnResourceUriChanging(value);
					this.SendPropertyChanging();
					this._ResourceUri = value;
					this.SendPropertyChanged("ResourceUri");
					this.OnResourceUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Move_PokemonMove", Storage="_PokemonMoves", ThisKey="MoveId", OtherKey="MoveId")]
		public EntitySet<PokemonMove> PokemonMoves
		{
			get
			{
				return this._PokemonMoves;
			}
			set
			{
				this._PokemonMoves.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PokemonMoves(PokemonMove entity)
		{
			this.SendPropertyChanging();
			entity.Move = this;
		}
		
		private void detach_PokemonMoves(PokemonMove entity)
		{
			this.SendPropertyChanging();
			entity.Move = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pokemon")]
	public partial class Pokemon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PokemonId;
		
		private int _PkApiId;
		
		private string _Name;
		
		private int _Hp;
		
		private int _Attack;
		
		private int _Defense;
		
		private int _SpAttack;
		
		private int _SpDefense;
		
		private int _Speed;
		
		private string _Height;
		
		private string _Weight;
		
		private string _Species;
		
		private int _CatchRate;
		
		private int _Happiness;
		
		private string _MaleToFemale;
		
		private System.DateTime _ModifiedDate;
		
		private string _ResourceUri;
		
		private EntitySet<PokemonAbility> _PokemonAbilities;
		
		private EntitySet<PokemonDescription> _PokemonDescriptions;
		
		private EntitySet<PokemonEvolution> _PokemonEvolutions;
		
		private EntitySet<PokemonEvolution> _PokemonEvolutions1;
		
		private EntitySet<PokemonMove> _PokemonMoves;
		
		private EntitySet<PokemonSprite> _PokemonSprites;
		
		private EntitySet<PokemonType> _PokemonTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPokemonIdChanging(int value);
    partial void OnPokemonIdChanged();
    partial void OnPkApiIdChanging(int value);
    partial void OnPkApiIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHpChanging(int value);
    partial void OnHpChanged();
    partial void OnAttackChanging(int value);
    partial void OnAttackChanged();
    partial void OnDefenseChanging(int value);
    partial void OnDefenseChanged();
    partial void OnSpAttackChanging(int value);
    partial void OnSpAttackChanged();
    partial void OnSpDefenseChanging(int value);
    partial void OnSpDefenseChanged();
    partial void OnSpeedChanging(int value);
    partial void OnSpeedChanged();
    partial void OnHeightChanging(string value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(string value);
    partial void OnWeightChanged();
    partial void OnSpeciesChanging(string value);
    partial void OnSpeciesChanged();
    partial void OnCatchRateChanging(int value);
    partial void OnCatchRateChanged();
    partial void OnHappinessChanging(int value);
    partial void OnHappinessChanged();
    partial void OnMaleToFemaleChanging(string value);
    partial void OnMaleToFemaleChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnResourceUriChanging(string value);
    partial void OnResourceUriChanged();
    #endregion
		
		public Pokemon()
		{
			this._PokemonAbilities = new EntitySet<PokemonAbility>(new Action<PokemonAbility>(this.attach_PokemonAbilities), new Action<PokemonAbility>(this.detach_PokemonAbilities));
			this._PokemonDescriptions = new EntitySet<PokemonDescription>(new Action<PokemonDescription>(this.attach_PokemonDescriptions), new Action<PokemonDescription>(this.detach_PokemonDescriptions));
			this._PokemonEvolutions = new EntitySet<PokemonEvolution>(new Action<PokemonEvolution>(this.attach_PokemonEvolutions), new Action<PokemonEvolution>(this.detach_PokemonEvolutions));
			this._PokemonEvolutions1 = new EntitySet<PokemonEvolution>(new Action<PokemonEvolution>(this.attach_PokemonEvolutions1), new Action<PokemonEvolution>(this.detach_PokemonEvolutions1));
			this._PokemonMoves = new EntitySet<PokemonMove>(new Action<PokemonMove>(this.attach_PokemonMoves), new Action<PokemonMove>(this.detach_PokemonMoves));
			this._PokemonSprites = new EntitySet<PokemonSprite>(new Action<PokemonSprite>(this.attach_PokemonSprites), new Action<PokemonSprite>(this.detach_PokemonSprites));
			this._PokemonTypes = new EntitySet<PokemonType>(new Action<PokemonType>(this.attach_PokemonTypes), new Action<PokemonType>(this.detach_PokemonTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PokemonId
		{
			get
			{
				return this._PokemonId;
			}
			set
			{
				if ((this._PokemonId != value))
				{
					this.OnPokemonIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonId = value;
					this.SendPropertyChanged("PokemonId");
					this.OnPokemonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkApiId", DbType="Int NOT NULL")]
		public int PkApiId
		{
			get
			{
				return this._PkApiId;
			}
			set
			{
				if ((this._PkApiId != value))
				{
					this.OnPkApiIdChanging(value);
					this.SendPropertyChanging();
					this._PkApiId = value;
					this.SendPropertyChanged("PkApiId");
					this.OnPkApiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hp", DbType="Int NOT NULL")]
		public int Hp
		{
			get
			{
				return this._Hp;
			}
			set
			{
				if ((this._Hp != value))
				{
					this.OnHpChanging(value);
					this.SendPropertyChanging();
					this._Hp = value;
					this.SendPropertyChanged("Hp");
					this.OnHpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attack", DbType="Int NOT NULL")]
		public int Attack
		{
			get
			{
				return this._Attack;
			}
			set
			{
				if ((this._Attack != value))
				{
					this.OnAttackChanging(value);
					this.SendPropertyChanging();
					this._Attack = value;
					this.SendPropertyChanged("Attack");
					this.OnAttackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defense", DbType="Int NOT NULL")]
		public int Defense
		{
			get
			{
				return this._Defense;
			}
			set
			{
				if ((this._Defense != value))
				{
					this.OnDefenseChanging(value);
					this.SendPropertyChanging();
					this._Defense = value;
					this.SendPropertyChanged("Defense");
					this.OnDefenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpAttack", DbType="Int NOT NULL")]
		public int SpAttack
		{
			get
			{
				return this._SpAttack;
			}
			set
			{
				if ((this._SpAttack != value))
				{
					this.OnSpAttackChanging(value);
					this.SendPropertyChanging();
					this._SpAttack = value;
					this.SendPropertyChanged("SpAttack");
					this.OnSpAttackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpDefense", DbType="Int NOT NULL")]
		public int SpDefense
		{
			get
			{
				return this._SpDefense;
			}
			set
			{
				if ((this._SpDefense != value))
				{
					this.OnSpDefenseChanging(value);
					this.SendPropertyChanging();
					this._SpDefense = value;
					this.SendPropertyChanged("SpDefense");
					this.OnSpDefenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speed", DbType="Int NOT NULL")]
		public int Speed
		{
			get
			{
				return this._Speed;
			}
			set
			{
				if ((this._Speed != value))
				{
					this.OnSpeedChanging(value);
					this.SendPropertyChanging();
					this._Speed = value;
					this.SendPropertyChanged("Speed");
					this.OnSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Species", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Species
		{
			get
			{
				return this._Species;
			}
			set
			{
				if ((this._Species != value))
				{
					this.OnSpeciesChanging(value);
					this.SendPropertyChanging();
					this._Species = value;
					this.SendPropertyChanged("Species");
					this.OnSpeciesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatchRate", DbType="Int NOT NULL")]
		public int CatchRate
		{
			get
			{
				return this._CatchRate;
			}
			set
			{
				if ((this._CatchRate != value))
				{
					this.OnCatchRateChanging(value);
					this.SendPropertyChanging();
					this._CatchRate = value;
					this.SendPropertyChanged("CatchRate");
					this.OnCatchRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Happiness", DbType="Int NOT NULL")]
		public int Happiness
		{
			get
			{
				return this._Happiness;
			}
			set
			{
				if ((this._Happiness != value))
				{
					this.OnHappinessChanging(value);
					this.SendPropertyChanging();
					this._Happiness = value;
					this.SendPropertyChanged("Happiness");
					this.OnHappinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaleToFemale", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string MaleToFemale
		{
			get
			{
				return this._MaleToFemale;
			}
			set
			{
				if ((this._MaleToFemale != value))
				{
					this.OnMaleToFemaleChanging(value);
					this.SendPropertyChanging();
					this._MaleToFemale = value;
					this.SendPropertyChanged("MaleToFemale");
					this.OnMaleToFemaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="Date NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceUri", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ResourceUri
		{
			get
			{
				return this._ResourceUri;
			}
			set
			{
				if ((this._ResourceUri != value))
				{
					this.OnResourceUriChanging(value);
					this.SendPropertyChanging();
					this._ResourceUri = value;
					this.SendPropertyChanged("ResourceUri");
					this.OnResourceUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonAbility", Storage="_PokemonAbilities", ThisKey="PokemonId", OtherKey="PokemonId")]
		public EntitySet<PokemonAbility> PokemonAbilities
		{
			get
			{
				return this._PokemonAbilities;
			}
			set
			{
				this._PokemonAbilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonDescription", Storage="_PokemonDescriptions", ThisKey="PokemonId", OtherKey="PokemonId")]
		public EntitySet<PokemonDescription> PokemonDescriptions
		{
			get
			{
				return this._PokemonDescriptions;
			}
			set
			{
				this._PokemonDescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonEvolution", Storage="_PokemonEvolutions", ThisKey="PokemonId", OtherKey="FromPokemonId")]
		public EntitySet<PokemonEvolution> PokemonEvolutions
		{
			get
			{
				return this._PokemonEvolutions;
			}
			set
			{
				this._PokemonEvolutions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonEvolution1", Storage="_PokemonEvolutions1", ThisKey="PokemonId", OtherKey="ToPokemonId")]
		public EntitySet<PokemonEvolution> PokemonEvolutions1
		{
			get
			{
				return this._PokemonEvolutions1;
			}
			set
			{
				this._PokemonEvolutions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonMove", Storage="_PokemonMoves", ThisKey="PokemonId", OtherKey="PokemonId")]
		public EntitySet<PokemonMove> PokemonMoves
		{
			get
			{
				return this._PokemonMoves;
			}
			set
			{
				this._PokemonMoves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonSprite", Storage="_PokemonSprites", ThisKey="PokemonId", OtherKey="PokemonId")]
		public EntitySet<PokemonSprite> PokemonSprites
		{
			get
			{
				return this._PokemonSprites;
			}
			set
			{
				this._PokemonSprites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonType", Storage="_PokemonTypes", ThisKey="PokemonId", OtherKey="PokemonId")]
		public EntitySet<PokemonType> PokemonTypes
		{
			get
			{
				return this._PokemonTypes;
			}
			set
			{
				this._PokemonTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PokemonAbilities(PokemonAbility entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = this;
		}
		
		private void detach_PokemonAbilities(PokemonAbility entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = null;
		}
		
		private void attach_PokemonDescriptions(PokemonDescription entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = this;
		}
		
		private void detach_PokemonDescriptions(PokemonDescription entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = null;
		}
		
		private void attach_PokemonEvolutions(PokemonEvolution entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = this;
		}
		
		private void detach_PokemonEvolutions(PokemonEvolution entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = null;
		}
		
		private void attach_PokemonEvolutions1(PokemonEvolution entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon1 = this;
		}
		
		private void detach_PokemonEvolutions1(PokemonEvolution entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon1 = null;
		}
		
		private void attach_PokemonMoves(PokemonMove entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = this;
		}
		
		private void detach_PokemonMoves(PokemonMove entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = null;
		}
		
		private void attach_PokemonSprites(PokemonSprite entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = this;
		}
		
		private void detach_PokemonSprites(PokemonSprite entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = null;
		}
		
		private void attach_PokemonTypes(PokemonType entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = this;
		}
		
		private void detach_PokemonTypes(PokemonType entity)
		{
			this.SendPropertyChanging();
			entity.Pokemon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PokemonAbility")]
	public partial class PokemonAbility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PokemonAbilityId;
		
		private int _PokemonId;
		
		private int _AbilityId;
		
		private EntityRef<Ability> _Ability;
		
		private EntityRef<Pokemon> _Pokemon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPokemonAbilityIdChanging(int value);
    partial void OnPokemonAbilityIdChanged();
    partial void OnPokemonIdChanging(int value);
    partial void OnPokemonIdChanged();
    partial void OnAbilityIdChanging(int value);
    partial void OnAbilityIdChanged();
    #endregion
		
		public PokemonAbility()
		{
			this._Ability = default(EntityRef<Ability>);
			this._Pokemon = default(EntityRef<Pokemon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonAbilityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PokemonAbilityId
		{
			get
			{
				return this._PokemonAbilityId;
			}
			set
			{
				if ((this._PokemonAbilityId != value))
				{
					this.OnPokemonAbilityIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonAbilityId = value;
					this.SendPropertyChanged("PokemonAbilityId");
					this.OnPokemonAbilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonId", DbType="Int NOT NULL")]
		public int PokemonId
		{
			get
			{
				return this._PokemonId;
			}
			set
			{
				if ((this._PokemonId != value))
				{
					if (this._Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPokemonIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonId = value;
					this.SendPropertyChanged("PokemonId");
					this.OnPokemonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbilityId", DbType="Int NOT NULL")]
		public int AbilityId
		{
			get
			{
				return this._AbilityId;
			}
			set
			{
				if ((this._AbilityId != value))
				{
					if (this._Ability.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbilityIdChanging(value);
					this.SendPropertyChanging();
					this._AbilityId = value;
					this.SendPropertyChanged("AbilityId");
					this.OnAbilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ability_PokemonAbility", Storage="_Ability", ThisKey="AbilityId", OtherKey="AbilityId", IsForeignKey=true)]
		public Ability Ability
		{
			get
			{
				return this._Ability.Entity;
			}
			set
			{
				Ability previousValue = this._Ability.Entity;
				if (((previousValue != value) 
							|| (this._Ability.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ability.Entity = null;
						previousValue.PokemonAbilities.Remove(this);
					}
					this._Ability.Entity = value;
					if ((value != null))
					{
						value.PokemonAbilities.Add(this);
						this._AbilityId = value.AbilityId;
					}
					else
					{
						this._AbilityId = default(int);
					}
					this.SendPropertyChanged("Ability");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonAbility", Storage="_Pokemon", ThisKey="PokemonId", OtherKey="PokemonId", IsForeignKey=true)]
		public Pokemon Pokemon
		{
			get
			{
				return this._Pokemon.Entity;
			}
			set
			{
				Pokemon previousValue = this._Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pokemon.Entity = null;
						previousValue.PokemonAbilities.Remove(this);
					}
					this._Pokemon.Entity = value;
					if ((value != null))
					{
						value.PokemonAbilities.Add(this);
						this._PokemonId = value.PokemonId;
					}
					else
					{
						this._PokemonId = default(int);
					}
					this.SendPropertyChanged("Pokemon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PokemonDescription")]
	public partial class PokemonDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PokemonDescriptionId;
		
		private int _PokemonId;
		
		private int _DescriptionId;
		
		private EntityRef<Description> _Description;
		
		private EntityRef<Pokemon> _Pokemon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPokemonDescriptionIdChanging(int value);
    partial void OnPokemonDescriptionIdChanged();
    partial void OnPokemonIdChanging(int value);
    partial void OnPokemonIdChanged();
    partial void OnDescriptionIdChanging(int value);
    partial void OnDescriptionIdChanged();
    #endregion
		
		public PokemonDescription()
		{
			this._Description = default(EntityRef<Description>);
			this._Pokemon = default(EntityRef<Pokemon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonDescriptionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PokemonDescriptionId
		{
			get
			{
				return this._PokemonDescriptionId;
			}
			set
			{
				if ((this._PokemonDescriptionId != value))
				{
					this.OnPokemonDescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonDescriptionId = value;
					this.SendPropertyChanged("PokemonDescriptionId");
					this.OnPokemonDescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonId", DbType="Int NOT NULL")]
		public int PokemonId
		{
			get
			{
				return this._PokemonId;
			}
			set
			{
				if ((this._PokemonId != value))
				{
					if (this._Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPokemonIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonId = value;
					this.SendPropertyChanged("PokemonId");
					this.OnPokemonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionId", DbType="Int NOT NULL")]
		public int DescriptionId
		{
			get
			{
				return this._DescriptionId;
			}
			set
			{
				if ((this._DescriptionId != value))
				{
					if (this._Description.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._DescriptionId = value;
					this.SendPropertyChanged("DescriptionId");
					this.OnDescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_PokemonDescription", Storage="_Description", ThisKey="DescriptionId", OtherKey="DescriptionId", IsForeignKey=true)]
		public Description Description
		{
			get
			{
				return this._Description.Entity;
			}
			set
			{
				Description previousValue = this._Description.Entity;
				if (((previousValue != value) 
							|| (this._Description.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Description.Entity = null;
						previousValue.PokemonDescriptions.Remove(this);
					}
					this._Description.Entity = value;
					if ((value != null))
					{
						value.PokemonDescriptions.Add(this);
						this._DescriptionId = value.DescriptionId;
					}
					else
					{
						this._DescriptionId = default(int);
					}
					this.SendPropertyChanged("Description");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonDescription", Storage="_Pokemon", ThisKey="PokemonId", OtherKey="PokemonId", IsForeignKey=true)]
		public Pokemon Pokemon
		{
			get
			{
				return this._Pokemon.Entity;
			}
			set
			{
				Pokemon previousValue = this._Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pokemon.Entity = null;
						previousValue.PokemonDescriptions.Remove(this);
					}
					this._Pokemon.Entity = value;
					if ((value != null))
					{
						value.PokemonDescriptions.Add(this);
						this._PokemonId = value.PokemonId;
					}
					else
					{
						this._PokemonId = default(int);
					}
					this.SendPropertyChanged("Pokemon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PokemonEvolution")]
	public partial class PokemonEvolution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvolutionId;
		
		private int _FromPokemonId;
		
		private int _ToPokemonId;
		
		private System.Nullable<int> _PokemonLevel;
		
		private string _Method;
		
		private EntityRef<Pokemon> _Pokemon;
		
		private EntityRef<Pokemon> _Pokemon1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvolutionIdChanging(int value);
    partial void OnEvolutionIdChanged();
    partial void OnFromPokemonIdChanging(int value);
    partial void OnFromPokemonIdChanged();
    partial void OnToPokemonIdChanging(int value);
    partial void OnToPokemonIdChanged();
    partial void OnPokemonLevelChanging(System.Nullable<int> value);
    partial void OnPokemonLevelChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    #endregion
		
		public PokemonEvolution()
		{
			this._Pokemon = default(EntityRef<Pokemon>);
			this._Pokemon1 = default(EntityRef<Pokemon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvolutionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EvolutionId
		{
			get
			{
				return this._EvolutionId;
			}
			set
			{
				if ((this._EvolutionId != value))
				{
					this.OnEvolutionIdChanging(value);
					this.SendPropertyChanging();
					this._EvolutionId = value;
					this.SendPropertyChanged("EvolutionId");
					this.OnEvolutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromPokemonId", DbType="Int NOT NULL")]
		public int FromPokemonId
		{
			get
			{
				return this._FromPokemonId;
			}
			set
			{
				if ((this._FromPokemonId != value))
				{
					if (this._Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromPokemonIdChanging(value);
					this.SendPropertyChanging();
					this._FromPokemonId = value;
					this.SendPropertyChanged("FromPokemonId");
					this.OnFromPokemonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToPokemonId", DbType="Int NOT NULL")]
		public int ToPokemonId
		{
			get
			{
				return this._ToPokemonId;
			}
			set
			{
				if ((this._ToPokemonId != value))
				{
					if (this._Pokemon1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToPokemonIdChanging(value);
					this.SendPropertyChanging();
					this._ToPokemonId = value;
					this.SendPropertyChanged("ToPokemonId");
					this.OnToPokemonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonLevel", DbType="Int")]
		public System.Nullable<int> PokemonLevel
		{
			get
			{
				return this._PokemonLevel;
			}
			set
			{
				if ((this._PokemonLevel != value))
				{
					this.OnPokemonLevelChanging(value);
					this.SendPropertyChanging();
					this._PokemonLevel = value;
					this.SendPropertyChanged("PokemonLevel");
					this.OnPokemonLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonEvolution", Storage="_Pokemon", ThisKey="FromPokemonId", OtherKey="PokemonId", IsForeignKey=true)]
		public Pokemon Pokemon
		{
			get
			{
				return this._Pokemon.Entity;
			}
			set
			{
				Pokemon previousValue = this._Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pokemon.Entity = null;
						previousValue.PokemonEvolutions.Remove(this);
					}
					this._Pokemon.Entity = value;
					if ((value != null))
					{
						value.PokemonEvolutions.Add(this);
						this._FromPokemonId = value.PokemonId;
					}
					else
					{
						this._FromPokemonId = default(int);
					}
					this.SendPropertyChanged("Pokemon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonEvolution1", Storage="_Pokemon1", ThisKey="ToPokemonId", OtherKey="PokemonId", IsForeignKey=true)]
		public Pokemon Pokemon1
		{
			get
			{
				return this._Pokemon1.Entity;
			}
			set
			{
				Pokemon previousValue = this._Pokemon1.Entity;
				if (((previousValue != value) 
							|| (this._Pokemon1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pokemon1.Entity = null;
						previousValue.PokemonEvolutions1.Remove(this);
					}
					this._Pokemon1.Entity = value;
					if ((value != null))
					{
						value.PokemonEvolutions1.Add(this);
						this._ToPokemonId = value.PokemonId;
					}
					else
					{
						this._ToPokemonId = default(int);
					}
					this.SendPropertyChanged("Pokemon1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PokemonMove")]
	public partial class PokemonMove : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PokemonMoveId;
		
		private int _PokemonId;
		
		private int _MoveId;
		
		private string _LearnType;
		
		private System.Nullable<int> _PokemonLevel;
		
		private EntityRef<Move> _Move;
		
		private EntityRef<Pokemon> _Pokemon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPokemonMoveIdChanging(int value);
    partial void OnPokemonMoveIdChanged();
    partial void OnPokemonIdChanging(int value);
    partial void OnPokemonIdChanged();
    partial void OnMoveIdChanging(int value);
    partial void OnMoveIdChanged();
    partial void OnLearnTypeChanging(string value);
    partial void OnLearnTypeChanged();
    partial void OnPokemonLevelChanging(System.Nullable<int> value);
    partial void OnPokemonLevelChanged();
    #endregion
		
		public PokemonMove()
		{
			this._Move = default(EntityRef<Move>);
			this._Pokemon = default(EntityRef<Pokemon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonMoveId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PokemonMoveId
		{
			get
			{
				return this._PokemonMoveId;
			}
			set
			{
				if ((this._PokemonMoveId != value))
				{
					this.OnPokemonMoveIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonMoveId = value;
					this.SendPropertyChanged("PokemonMoveId");
					this.OnPokemonMoveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonId", DbType="Int NOT NULL")]
		public int PokemonId
		{
			get
			{
				return this._PokemonId;
			}
			set
			{
				if ((this._PokemonId != value))
				{
					if (this._Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPokemonIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonId = value;
					this.SendPropertyChanged("PokemonId");
					this.OnPokemonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoveId", DbType="Int NOT NULL")]
		public int MoveId
		{
			get
			{
				return this._MoveId;
			}
			set
			{
				if ((this._MoveId != value))
				{
					if (this._Move.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMoveIdChanging(value);
					this.SendPropertyChanging();
					this._MoveId = value;
					this.SendPropertyChanged("MoveId");
					this.OnMoveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearnType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LearnType
		{
			get
			{
				return this._LearnType;
			}
			set
			{
				if ((this._LearnType != value))
				{
					this.OnLearnTypeChanging(value);
					this.SendPropertyChanging();
					this._LearnType = value;
					this.SendPropertyChanged("LearnType");
					this.OnLearnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonLevel", DbType="Int")]
		public System.Nullable<int> PokemonLevel
		{
			get
			{
				return this._PokemonLevel;
			}
			set
			{
				if ((this._PokemonLevel != value))
				{
					this.OnPokemonLevelChanging(value);
					this.SendPropertyChanging();
					this._PokemonLevel = value;
					this.SendPropertyChanged("PokemonLevel");
					this.OnPokemonLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Move_PokemonMove", Storage="_Move", ThisKey="MoveId", OtherKey="MoveId", IsForeignKey=true)]
		public Move Move
		{
			get
			{
				return this._Move.Entity;
			}
			set
			{
				Move previousValue = this._Move.Entity;
				if (((previousValue != value) 
							|| (this._Move.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Move.Entity = null;
						previousValue.PokemonMoves.Remove(this);
					}
					this._Move.Entity = value;
					if ((value != null))
					{
						value.PokemonMoves.Add(this);
						this._MoveId = value.MoveId;
					}
					else
					{
						this._MoveId = default(int);
					}
					this.SendPropertyChanged("Move");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonMove", Storage="_Pokemon", ThisKey="PokemonId", OtherKey="PokemonId", IsForeignKey=true)]
		public Pokemon Pokemon
		{
			get
			{
				return this._Pokemon.Entity;
			}
			set
			{
				Pokemon previousValue = this._Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pokemon.Entity = null;
						previousValue.PokemonMoves.Remove(this);
					}
					this._Pokemon.Entity = value;
					if ((value != null))
					{
						value.PokemonMoves.Add(this);
						this._PokemonId = value.PokemonId;
					}
					else
					{
						this._PokemonId = default(int);
					}
					this.SendPropertyChanged("Pokemon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PokemonSprite")]
	public partial class PokemonSprite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PokemonSpriteId;
		
		private int _PokemonId;
		
		private int _SpriteId;
		
		private EntityRef<Pokemon> _Pokemon;
		
		private EntityRef<Sprite> _Sprite;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPokemonSpriteIdChanging(int value);
    partial void OnPokemonSpriteIdChanged();
    partial void OnPokemonIdChanging(int value);
    partial void OnPokemonIdChanged();
    partial void OnSpriteIdChanging(int value);
    partial void OnSpriteIdChanged();
    #endregion
		
		public PokemonSprite()
		{
			this._Pokemon = default(EntityRef<Pokemon>);
			this._Sprite = default(EntityRef<Sprite>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonSpriteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PokemonSpriteId
		{
			get
			{
				return this._PokemonSpriteId;
			}
			set
			{
				if ((this._PokemonSpriteId != value))
				{
					this.OnPokemonSpriteIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonSpriteId = value;
					this.SendPropertyChanged("PokemonSpriteId");
					this.OnPokemonSpriteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonId", DbType="Int NOT NULL")]
		public int PokemonId
		{
			get
			{
				return this._PokemonId;
			}
			set
			{
				if ((this._PokemonId != value))
				{
					if (this._Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPokemonIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonId = value;
					this.SendPropertyChanged("PokemonId");
					this.OnPokemonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpriteId", DbType="Int NOT NULL")]
		public int SpriteId
		{
			get
			{
				return this._SpriteId;
			}
			set
			{
				if ((this._SpriteId != value))
				{
					if (this._Sprite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpriteIdChanging(value);
					this.SendPropertyChanging();
					this._SpriteId = value;
					this.SendPropertyChanged("SpriteId");
					this.OnSpriteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonSprite", Storage="_Pokemon", ThisKey="PokemonId", OtherKey="PokemonId", IsForeignKey=true)]
		public Pokemon Pokemon
		{
			get
			{
				return this._Pokemon.Entity;
			}
			set
			{
				Pokemon previousValue = this._Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pokemon.Entity = null;
						previousValue.PokemonSprites.Remove(this);
					}
					this._Pokemon.Entity = value;
					if ((value != null))
					{
						value.PokemonSprites.Add(this);
						this._PokemonId = value.PokemonId;
					}
					else
					{
						this._PokemonId = default(int);
					}
					this.SendPropertyChanged("Pokemon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprite_PokemonSprite", Storage="_Sprite", ThisKey="SpriteId", OtherKey="SpriteId", IsForeignKey=true)]
		public Sprite Sprite
		{
			get
			{
				return this._Sprite.Entity;
			}
			set
			{
				Sprite previousValue = this._Sprite.Entity;
				if (((previousValue != value) 
							|| (this._Sprite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sprite.Entity = null;
						previousValue.PokemonSprites.Remove(this);
					}
					this._Sprite.Entity = value;
					if ((value != null))
					{
						value.PokemonSprites.Add(this);
						this._SpriteId = value.SpriteId;
					}
					else
					{
						this._SpriteId = default(int);
					}
					this.SendPropertyChanged("Sprite");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PokemonType")]
	public partial class PokemonType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PokemonTypeId;
		
		private int _PokemonId;
		
		private int _TypeId;
		
		private EntityRef<Pokemon> _Pokemon;
		
		private EntityRef<Type> _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPokemonTypeIdChanging(int value);
    partial void OnPokemonTypeIdChanged();
    partial void OnPokemonIdChanging(int value);
    partial void OnPokemonIdChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    #endregion
		
		public PokemonType()
		{
			this._Pokemon = default(EntityRef<Pokemon>);
			this._Type = default(EntityRef<Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PokemonTypeId
		{
			get
			{
				return this._PokemonTypeId;
			}
			set
			{
				if ((this._PokemonTypeId != value))
				{
					this.OnPokemonTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonTypeId = value;
					this.SendPropertyChanged("PokemonTypeId");
					this.OnPokemonTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PokemonId", DbType="Int NOT NULL")]
		public int PokemonId
		{
			get
			{
				return this._PokemonId;
			}
			set
			{
				if ((this._PokemonId != value))
				{
					if (this._Pokemon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPokemonIdChanging(value);
					this.SendPropertyChanging();
					this._PokemonId = value;
					this.SendPropertyChanged("PokemonId");
					this.OnPokemonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int NOT NULL")]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pokemon_PokemonType", Storage="_Pokemon", ThisKey="PokemonId", OtherKey="PokemonId", IsForeignKey=true)]
		public Pokemon Pokemon
		{
			get
			{
				return this._Pokemon.Entity;
			}
			set
			{
				Pokemon previousValue = this._Pokemon.Entity;
				if (((previousValue != value) 
							|| (this._Pokemon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pokemon.Entity = null;
						previousValue.PokemonTypes.Remove(this);
					}
					this._Pokemon.Entity = value;
					if ((value != null))
					{
						value.PokemonTypes.Add(this);
						this._PokemonId = value.PokemonId;
					}
					else
					{
						this._PokemonId = default(int);
					}
					this.SendPropertyChanged("Pokemon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_PokemonType", Storage="_Type", ThisKey="TypeId", OtherKey="TypeId", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.PokemonTypes.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.PokemonTypes.Add(this);
						this._TypeId = value.TypeId;
					}
					else
					{
						this._TypeId = default(int);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sprite")]
	public partial class Sprite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpriteId;
		
		private int _PkApiId;
		
		private string _Image;
		
		private System.DateTime _ModifiedDate;
		
		private string _ResourceUri;
		
		private EntitySet<PokemonSprite> _PokemonSprites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpriteIdChanging(int value);
    partial void OnSpriteIdChanged();
    partial void OnPkApiIdChanging(int value);
    partial void OnPkApiIdChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnResourceUriChanging(string value);
    partial void OnResourceUriChanged();
    #endregion
		
		public Sprite()
		{
			this._PokemonSprites = new EntitySet<PokemonSprite>(new Action<PokemonSprite>(this.attach_PokemonSprites), new Action<PokemonSprite>(this.detach_PokemonSprites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpriteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpriteId
		{
			get
			{
				return this._SpriteId;
			}
			set
			{
				if ((this._SpriteId != value))
				{
					this.OnSpriteIdChanging(value);
					this.SendPropertyChanging();
					this._SpriteId = value;
					this.SendPropertyChanged("SpriteId");
					this.OnSpriteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkApiId", DbType="Int NOT NULL")]
		public int PkApiId
		{
			get
			{
				return this._PkApiId;
			}
			set
			{
				if ((this._PkApiId != value))
				{
					this.OnPkApiIdChanging(value);
					this.SendPropertyChanging();
					this._PkApiId = value;
					this.SendPropertyChanged("PkApiId");
					this.OnPkApiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="Date NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceUri", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ResourceUri
		{
			get
			{
				return this._ResourceUri;
			}
			set
			{
				if ((this._ResourceUri != value))
				{
					this.OnResourceUriChanging(value);
					this.SendPropertyChanging();
					this._ResourceUri = value;
					this.SendPropertyChanged("ResourceUri");
					this.OnResourceUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprite_PokemonSprite", Storage="_PokemonSprites", ThisKey="SpriteId", OtherKey="SpriteId")]
		public EntitySet<PokemonSprite> PokemonSprites
		{
			get
			{
				return this._PokemonSprites;
			}
			set
			{
				this._PokemonSprites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PokemonSprites(PokemonSprite entity)
		{
			this.SendPropertyChanging();
			entity.Sprite = this;
		}
		
		private void detach_PokemonSprites(PokemonSprite entity)
		{
			this.SendPropertyChanging();
			entity.Sprite = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type")]
	public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeId;
		
		private int _PkApiId;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private string _ResourceUri;
		
		private EntitySet<TypeToTypeEffect> _TypeToTypeEffects;
		
		private EntitySet<TypeToTypeEffect> _TypeToTypeEffects1;
		
		private EntitySet<PokemonType> _PokemonTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    partial void OnPkApiIdChanging(int value);
    partial void OnPkApiIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnResourceUriChanging(string value);
    partial void OnResourceUriChanged();
    #endregion
		
		public Type()
		{
			this._TypeToTypeEffects = new EntitySet<TypeToTypeEffect>(new Action<TypeToTypeEffect>(this.attach_TypeToTypeEffects), new Action<TypeToTypeEffect>(this.detach_TypeToTypeEffects));
			this._TypeToTypeEffects1 = new EntitySet<TypeToTypeEffect>(new Action<TypeToTypeEffect>(this.attach_TypeToTypeEffects1), new Action<TypeToTypeEffect>(this.detach_TypeToTypeEffects1));
			this._PokemonTypes = new EntitySet<PokemonType>(new Action<PokemonType>(this.attach_PokemonTypes), new Action<PokemonType>(this.detach_PokemonTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkApiId", DbType="Int NOT NULL")]
		public int PkApiId
		{
			get
			{
				return this._PkApiId;
			}
			set
			{
				if ((this._PkApiId != value))
				{
					this.OnPkApiIdChanging(value);
					this.SendPropertyChanging();
					this._PkApiId = value;
					this.SendPropertyChanged("PkApiId");
					this.OnPkApiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="Date NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceUri", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ResourceUri
		{
			get
			{
				return this._ResourceUri;
			}
			set
			{
				if ((this._ResourceUri != value))
				{
					this.OnResourceUriChanging(value);
					this.SendPropertyChanging();
					this._ResourceUri = value;
					this.SendPropertyChanged("ResourceUri");
					this.OnResourceUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_TypeToTypeEffect", Storage="_TypeToTypeEffects", ThisKey="TypeId", OtherKey="TypeId")]
		public EntitySet<TypeToTypeEffect> TypeToTypeEffects
		{
			get
			{
				return this._TypeToTypeEffects;
			}
			set
			{
				this._TypeToTypeEffects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_TypeToTypeEffect1", Storage="_TypeToTypeEffects1", ThisKey="TypeId", OtherKey="AgainstTypeId")]
		public EntitySet<TypeToTypeEffect> TypeToTypeEffects1
		{
			get
			{
				return this._TypeToTypeEffects1;
			}
			set
			{
				this._TypeToTypeEffects1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_PokemonType", Storage="_PokemonTypes", ThisKey="TypeId", OtherKey="TypeId")]
		public EntitySet<PokemonType> PokemonTypes
		{
			get
			{
				return this._PokemonTypes;
			}
			set
			{
				this._PokemonTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TypeToTypeEffects(TypeToTypeEffect entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_TypeToTypeEffects(TypeToTypeEffect entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
		
		private void attach_TypeToTypeEffects1(TypeToTypeEffect entity)
		{
			this.SendPropertyChanging();
			entity.Type1 = this;
		}
		
		private void detach_TypeToTypeEffects1(TypeToTypeEffect entity)
		{
			this.SendPropertyChanging();
			entity.Type1 = null;
		}
		
		private void attach_PokemonTypes(PokemonType entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_PokemonTypes(PokemonType entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeEffect")]
	public partial class TypeEffect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeEffectId;
		
		private string _Name;
		
		private EntitySet<TypeToTypeEffect> _TypeToTypeEffects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeEffectIdChanging(int value);
    partial void OnTypeEffectIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TypeEffect()
		{
			this._TypeToTypeEffects = new EntitySet<TypeToTypeEffect>(new Action<TypeToTypeEffect>(this.attach_TypeToTypeEffects), new Action<TypeToTypeEffect>(this.detach_TypeToTypeEffects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeEffectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeEffectId
		{
			get
			{
				return this._TypeEffectId;
			}
			set
			{
				if ((this._TypeEffectId != value))
				{
					this.OnTypeEffectIdChanging(value);
					this.SendPropertyChanging();
					this._TypeEffectId = value;
					this.SendPropertyChanged("TypeEffectId");
					this.OnTypeEffectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeEffect_TypeToTypeEffect", Storage="_TypeToTypeEffects", ThisKey="TypeEffectId", OtherKey="TypeEffectId")]
		public EntitySet<TypeToTypeEffect> TypeToTypeEffects
		{
			get
			{
				return this._TypeToTypeEffects;
			}
			set
			{
				this._TypeToTypeEffects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TypeToTypeEffects(TypeToTypeEffect entity)
		{
			this.SendPropertyChanging();
			entity.TypeEffect = this;
		}
		
		private void detach_TypeToTypeEffects(TypeToTypeEffect entity)
		{
			this.SendPropertyChanging();
			entity.TypeEffect = null;
		}
	}
}
#pragma warning restore 1591
